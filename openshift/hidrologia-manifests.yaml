# Manifiestos completos para Hidrología Mock API en OpenShift
# Configuración S2I que funciona (basada en meteorología)
apiVersion: v1
kind: List
metadata:
  name: hidrologia-mock-api
  labels:
    app: hidrologia-mock-api
    app.kubernetes.io/name: hidrologia-mock-api
    app.kubernetes.io/part-of: hidrologia-system
items:

# ServiceAccount
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: hidrologia-mock-api
    labels:
      app: hidrologia-mock-api

# ImageStream
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: hidrologia-mock-api
    labels:
      app: hidrologia-mock-api
  spec:
    lookupPolicy:
      local: false

# BuildConfig usando S2I (configuración exacta de meteorología)
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    name: hidrologia-mock-api
    labels:
      app: hidrologia-mock-api
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: 'hidrologia-mock-api:latest'
    resources: {}
    successfulBuildsHistoryLimit: 5
    failedBuildsHistoryLimit: 5
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: DockerImage
          name: 'registry.redhat.io/ubi8/openjdk-17:1.18'
        env:
        - name: MAVEN_ARGS
          value: clean package -DskipTests -Dquarkus.package.type=fast-jar
        - name: MAVEN_OPTS
          value: '-Xmx1024m'
        - name: JAVA_APP_JAR
          value: quarkus-run.jar
    postCommit: {}
    source:
      type: Git
      git:
        uri: 'https://github.com/Obwank3n0by/hidrologia-mock-api.git'
        ref: main
    triggers:
    - type: ConfigChange
    runPolicy: Serial

# Deployment (Configuración exacta de meteorología que funciona)
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: hidrologia-mock-api
    labels:
      app: hidrologia-mock-api
      app.kubernetes.io/component: backend
      app.kubernetes.io/name: hidrologia-mock-api
    annotations:
      image.openshift.io/triggers: >-
        [{"from":{"kind":"ImageStreamTag","name":"hidrologia-mock-api:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"hidrologia-mock-api\")].image","paused":"false"}]
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: hidrologia-mock-api
    template:
      metadata:
        labels:
          app: hidrologia-mock-api
      spec:
        serviceAccountName: hidrologia-mock-api
        serviceAccount: hidrologia-mock-api
        containers:
        - name: hidrologia-mock-api
          image: hidrologia-mock-api:latest
          imagePullPolicy: Always
          ports:
          - name: http
            containerPort: 8080
            protocol: TCP
          env:
          # Variables exactas que funcionan en meteorología
          - name: JAVA_APP_JAR
            value: /deployments/quarkus-app/quarkus-run.jar
          - name: JAVA_LIB_DIR
            value: /deployments/quarkus-app/lib/
          - name: JAVA_CLASSPATH
            value: /deployments/quarkus-app/lib/*:/deployments/quarkus-app/app/*:/deployments/quarkus-app/quarkus/*
          - name: QUARKUS_HTTP_HOST
            value: "0.0.0.0"
          - name: QUARKUS_HTTP_PORT
            value: "8080"
          - name: LANG
            value: C.UTF-8
          - name: LC_ALL
            value: C.UTF-8
          - name: JAVA_OPTS_APPEND
            value: "-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager"
          - name: JAVA_OPTIONS
            value: "-Xms128m -Xmx512m -XX:+UseParallelGC"
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
          livenessProbe:
            httpGet:
              path: /api/water/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 45
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/water/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 20
            timeoutSeconds: 3
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        schedulerName: default-scheduler
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
    revisionHistoryLimit: 10
    progressDeadlineSeconds: 600

# Service
- apiVersion: v1
  kind: Service
  metadata:
    name: hidrologia-mock-api
    labels:
      app: hidrologia-mock-api
      app.kubernetes.io/name: hidrologia-mock-api
      app.kubernetes.io/part-of: hidrologia-system
  spec:
    ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: hidrologia-mock-api
    type: ClusterIP
    sessionAffinity: None

# Route
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: hidrologia-mock-api-route
    labels:
      app: hidrologia-mock-api
      app.kubernetes.io/name: hidrologia-mock-api
      app.kubernetes.io/part-of: hidrologia-system
  spec:
    to:
      kind: Service
      name: hidrologia-mock-api
      weight: 100
    port:
      targetPort: http
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
    wildcardPolicy: None